**********************************************
Virtual Observatory (VO) Access (`astropy.vo`)
**********************************************

Introduction
============

The `astropy.vo` subpackage handles simple access for Virtual Observatory
services.

Currently, only Simple Cone Search is supported. Cone Search searches an
area encompassed by a given radius centered on a given RA and DEC and returns
all the catalog objects found within the area, along with their meta-data.

(reference to Simple Cone Search Version 1.03 Recommendation)


Default Cone Search Services
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Currently, the default Cone Search services used are a
subset of those found in `STScI VAO registry
<http://vao.stsci.edu/directory/NVORegInt.asmx?op=VOTCapabilityPredOpt>`_.
They are hand-picked to represent commonly used catalogs below:

    * 2MASS All-Sky
    * HST Guide Star Catalog
    * SDSS Data Release 7
    * SDSS-III Data Release 8
    * USNO A1
    * USNO A2
    * USNO B1

From this subset, the ones that pass daily validation
are used by `astropy.vo.client.conesearch` by default.

(Reference to vo_databases...)

If you are a Cone Search service provider and would like
to include your service in this list, please contact the
AstroPy Team.

Caching
^^^^^^^

Caching of downloaded contents is controlled by `astropy.utils.data`.
To *not* use cached data, some functions in this package have a `cache`
keyword that can be set to `False`.


Getting Started
===============

This package has four main components across two sub-packages:

    * Client: General VO Services Access (add links to this list)
    * Client: Simple Cone Search
    * Validator: Validation for Simple Cone Search
    * Validator: Inspection of Validation Results

Need to put some kind of VO workflow image here.

The one that a typical user needs is the Simple Cone Search component
(see `astropy.vo.client.conesearch` section). The other ones are written to
support the cone search interface.


Using `astropy.vo.client`
=========================

VO Services Client.


General VO Services Access
--------------------------

`astropy.vo.client.vos_catalog` contains common utilities for accessing
simple VO services.

Configurable Items
^^^^^^^^^^^^^^^^^^

These parameters are set via Astropy configuration system:

    * `astropy.io.votable.pedantic`
    * `astropy.utils.remote_timeout`
    * `astropy.vo.client.vos_baseurl`

Examples
^^^^^^^^

Get all catalogs from a database named 'conesearch_good'.
For more cone search examples, see `astropy.vo.client.conesearch`:

>>> from astropy.vo.client import vos_catalog
>>> my_db = vos_catalog.get_remote_catalog_db('conesearch_good')

To run the command above using custom timeout of 30 seconds:

>>> from astropy.utils.data import REMOTE_TIMEOUT
>>> with REMOTE_TIMEOUT.set_temp(30):
...     my_db = vos_catalog.get_remote_catalog_db('conesearch_good')

Find catalog names containing 'usno*a2':

>>> cat_names = my_db.list_catalogs(pattern='usno*a2', sort=True)

Get information for first catalog from above. Catalog
fields may vary:

>>> my_cat = my_db.get_catalog(cat_names[0])
>>> print(my_cat)
{
    \"validate_network_error\": null,
    \"capabilityClass\": \"ConeSearch\",
    \"updated\": \"2011-09-14T20:20:21\",
    \"capabilityValidationLevel\": \"\",
    \"maxRecords\": 9999,
    # ...
    \"validate_xmllint\": true
}
>>> cat_keys = my_cat.keys()
>>> cat_url = my_cat['url']
>>> max_rad = my_cat['maxRadius']

One can also get information for a catalog using its URL.
If URL yields multiple catalogs, only first match is given:

>>> my_cat2 = my_db.get_catalog_by_url(cat_url)
>>> print(cat_url)
http://archive.noao.edu/nvo/usno.php?cat=a&
>>> print(my_cat2)
{
    \"validate_network_error\": null,
    \"capabilityClass": "ConeSearch\",
    \"updated\": \"2011-09-14T18:12:13\",
    \"capabilityValidationLevel\": \"2\",
    \"maxRecords\": 10,
    \"validate_nwarnings\": 13,
    # ...
    \"validate_xmllint\": true
}

To see validation warnings generated by
`astropy.vo.validator.validate.check_conesearch_sites`
for the catalog above:

>>> for w in my_cat2['validate_warnings']:
...     print(w)
.../vo.xml:3:0: W29: Version specified in non-standard form 'v1.0'
.../vo.xml:3:0: W21: vo.table is designed for VOTable version 1.1 and 1.2, ...
# ...
.../vo.xml:43:8: W03: Implictly generating an ID from a name ...

To get all the matching catalogs by URL:

>>> cat_list = [cat for key, cat in my_db.get_catalogs_by_url(cat_url)]

To get all catalogs in the database:

>>> all_cat_list = [cat for key, cat in my_db.get_catalogs()]


Simple Cone Search
------------------

`astropy.vo.client.conesearch` support VO Simple Cone Search capabilities.

Available databases are generated on the server side by
`astropy.vo.validator.validate.check_conesearch_sites`.
Default database is 'conesearch_good.json', which can be changed
locally in a session via AstroPy configuration system.

In the default setting, it searches the good cone search sites one by one,
stops at the first site that gives non-zero matches, and returns the results.
The examples below shows how to use non-default search behaviors.

.. note::

    Most services currently fail to parse when `pedantic` is `True`.

.. warning::

    When Cone Search returns warnings, user should decide
    whether the results are reliable by inspecting the
    warning codes in `astropy.io.votable.exceptions`.

Configurable Items
^^^^^^^^^^^^^^^^^^

These parameters are set via Astropy configuration system:

    * `astropy.utils.remote_timeout`
    * `astropy.vo.client.conesearch_dbname`
    * Also depends on properties set by `astropy.vo.client.vos_catalog`

Examples
^^^^^^^^

Perform cone search for 0.5 degree radius around 47 Tuc
(RA 6.088 deg, DEC -72.086 deg) with minimum verbosity,
if supported. The first catalog in the database to
successfully return a result is used. If running this for
the first time, a copy of the catalogs database will be
downloaded to local cache. To run this again without
using cached data, set `cache` keyword to `False`:

>>> from astropy.vo.client import conesearch
>>> result = conesearch.conesearch(6.088, -72.086, 0.5, pedantic=False)

To run the command above using custom timeout of
30 seconds for each URL query in Cone Search:

>>> from astropy.utils.data import REMOTE_TIMEOUT
>>> with REMOTE_TIMEOUT.set_temp(30):
...     result = conesearch.conesearch(6.088, -72.086, 0.5, pedantic=False)

Extract Numpy array containing the matched objects. See
`numpy.ndarray` for available operations:

>>> cone_arr = result.array.data
>>> col_names = cone_arr.dtype.names
>>> col_ra = col_names[1] # This depends on the catalog
>>> n_rec = cone_arr.size
>>> ra_list = cone_arr[col_ra]
>>> first_row = cone_arr[0]
>>> last_row = cone_arr[-1]
>>> first_ten_rows = cone_arr[:10]

Result can also be manipulated as `astropy.io.votable`
and its unit can be manipulated as `astropy.units`:

>>> from astropy import units as u
>>> ra_field = result.get_field_by_id(col_ra)
>>> print(ra_field.unit)
deg
>>> ra_field.unit.to(u.arcsec) * ra_list
array([ 16075.35  ,  16088.0112,  16090.4628, ...])

Perform the same cone search as above but asynchronously
(queries to individual URLs are still governed by
`astropy.utils.remote_timeout`):

>>> async_search = conesearch.AsyncConeSearch(
...     6.088, -72.086, 0.5, pedantic=False)

Check search status:

>>> async_search.running()
True
>>> async_search.done()
False

Get search results after a 30-sec wait (not to be
confused with `astropy.utils.remote_timeout` that
governs individual URL queries). If still not
done after 30 seconds, TimeoutError is raised. Otherwise,
conesearch result is returned and can be manipulated as
above. If no `timeout` keyword given, it waits till
completion:

>>> async_result = async_search.get(timeout=30)
>>> cone_arr = async_result.array.data

Estimate the execution time and the number of objects for
the cone search above. The function naively assumes a
linear model, which might not be accurate for some cases.
It also uses the normal Cone Search function, not the
asynchronous version. This example uses a custom timeout
of 30 seconds:

>>> with REMOTE_TIMEOUT.set_temp(30):
...     t_est, n_est = conesearch.predict_search(
...         result.url, 6.088, -72.086, 0.5, pedantic=False)

.. image:: images/client_predict_search.png
    :width: 450px
    :alt: Example plot from conesearch.predict_search

For debugging purpose, one can obtain the actual values
and compare with the prediction above. Keep in mind that
running this for every prediction would defeat the purpose
of the prediction itself:

>>> t_real, tab = conesearch.conesearch_timer(
...     6.088, -72.086, 0.5, catalog_db=result.url, pedantic=False)
>>> n_real = tab.array.size

If one is unable to obtain any results using the default
cone search database that only contains sites that cleanly
passed validation, one can use the AstroPy configuration
system to use another database containing sites with
validation warnings. One should use these sites with
caution:

>>> conesearch.CONESEARCH_DBNAME.set('conesearch_warn')

Find catalog names containing 'usno-a' and sort them
alphabetically:

>>> usnoa_cats = conesearch.list_catalogs(pattern='usno-a', sort=True)
>>> print(usnoa_cats)
[u'USNO-A V2.0, A Catalog of Astrometric Standards 1', u'USNO-A2.0 1']

Perform the same cone search as above using only USNO-A
catalogs in this new database. As the first catalog in
the database to successfully return a result is used,
the order of catalog names given to `catalog_db` is
important:

>>> result = conesearch.conesearch(
...     6.088, -72.086, 0.5, catalog_db=usnoa_cats, pedantic=False)
>>> cone_arr = result.array.data
>>> print(cone_arr.size)
3602

Repeat cone search with a smaller search radius using
the URL from the result above:

>>> result2 = conesearch.conesearch(
...     6.088, -72.086, 0.1, catalog_db=result.url, pedantic=False)
>>> cone_arr2 = result2.array.data
>>> print(cone_arr2.size)
339

To see the catalog information for the access URL used
above, `astropy.vo.client.vos_catalog`.


Using `astropy.vo.validator`
============================

VO services validator is only included for completeness.
A typical user should not need to set up the validator.


Validation for Simple Cone Search
---------------------------------

`astropy.vo.validator.validate` validates VO services.

This could be used by VO service providers to validate
their services.

.. note::

    All cone search queries are done using RA, DEC, and SR
    given by `testQuery` in the registry and maximum verbosity.
    No validation is done for erroneous and meta-data queries.

    Until STScI VAO registry formally provides `testQuery`
    parameters, they are extracted from
    `astropy.vo.validator.tstquery.parse_cs`.

    Any '&amp;' in URL is replaced with '&' to avoid query failure.

    Not all units recognized by
    `VizieR <http://cdsarc.u-strasbg.fr/vizier/Units.htx>`_ are
    considered valid in validation; Warning 'W50' will be
    raised for these units, as well as the illegal ones.

A master list of all available Cone Search sites is
obtained from `astropy.vo.validator.cs_mstr_list`, which
is a URL query to STScI VAO registry by default.

The sites in `astropy.vo.validator.cs_urls` (or optionally
all sites found in registry or any given `url_list`) are
validated using `astropy.io.votable.validator` and
separated into 4 groups below, each is stored as a JSON
database in `destdir`. Existing files with same names
will be deleted to avoid confusion:

    #. *conesearch_good.json*
           Passed validation without critical warnings and
           exceptions. This database in
           `astropy.vo.client.vos_baseurl` is the one used
           by `astropy.vo.client.conesearch` by default.
    #. *conesearch_warn.json*
           Has critical warnings but no exceptions. Users
           can manually set `astropy.vo.client.conesearch`
           to use this at their own risk.
    #. *conesearch_exception.json*
           Has some exceptions. *Never* use this.
           For informational purpose only.
    #. *conesearch_error.json*
           Has network connection error. *Never* use this.
           For informational purpose only.

HTML pages summarizing the validation results are generated by
`astropy.io.votable.validator` and stored in 'results'
sub-directory, which also contains downloaded XML files from
individual cone search queries.

Warnings and Exceptions
^^^^^^^^^^^^^^^^^^^^^^^

A subset of `astropy.io.votable.exceptions` that is considered
non-critical is defined by `astropy.vo.validator.noncrit_warnings`
configurable property. This means validation will ignore them
(but `astropy.io.votable.table.pedantic` still needs to be set
to `False` if user wants to use results from sites with these
warnings). Despite listed as non-critical, user is responsible
to check whether the results are reliable; They should not be
used blindly.

User can also modify the configurable item to include or
exclude any warnings or exceptions, as desired, although adding
exceptions is not recommended.

Building the Database
^^^^^^^^^^^^^^^^^^^^^

For user-friendly catalog listing, title will be the catalog key.
To avoid repeating the same query, access URL should be unique.
In STScI VAO registry, a title can have multiple access URLs,
and vice versa. In addition, the same title and access URL can
also repeat under different descriptions.

In the case of (title, url 1) and (title, url 2), they will appear
as two different entries with title renamed to 'title N' where N
is a sequence number. If the title does not repeat in the entire
database, only 'title 1' exists.

In the case of (title 1, url) and (title 2, url), database will
use (title 1, url) and ignore (title 2, url).

If the same (title, url) has multiple entries, database will use
the first match and ignore the rest.

A new field named 'duplicatesIgnored' is added to each catalog in
the database to count ignored duplicate entries. New fields named
'validate_xxx' are added from attributes of
`astropy.io.votable.validate.result.Result`, where 'xxx' is the
original attribute name.

Configurable Items
^^^^^^^^^^^^^^^^^^

These parameters are set via Astropy configuration system:

    * `astropy.utils.remote_timeout`
    * `astropy.vo.validator.cs_mstr_list`
    * `astropy.vo.validator.cs_urls`
    * `astropy.vo.validator.noncrit_warnings`
    * Also depends on properties in `astropy.vo.client`

Examples
^^^^^^^^

Validate default Cone Search sites with multiprocessing
and write results in the current directory:

>>> from astropy.vo.validator import validate
>>> validate.check_conesearch_sites()

To validate using a custom timeout of 30 seconds:

>>> from astropy.utils.data import REMOTE_TIMEOUT
>>> with REMOTE_TIMEOUT.set_temp(30):
...     validate.check_conesearch_sites()

From the STScI VAO registry, select Cone Search URLs
hosted by 'stsci.edu':

>>> import numpy as np
>>> from astropy.io.votable import parse_single_table
>>> from astropy.utils.data import get_readable_fileobj
>>> with get_readable_fileobj(validate.CS_MSTR_LIST(),
...                           encoding='binary') as fd:
...     tab_all = parse_single_table(fd, pedantic=False)
>>> arr = tab_all.array.data[
...     np.where(tab_all.array['capabilityClass'] == b'ConeSearch')]
>>> urls = [s for s in arr['accessURL'] if b'stsci.edu' in s]
>>> print(urls[0])
b'http://archive.stsci.edu/hst/search.php?sci_data_set_name=Y*&amp;'

Validate only the URLs found above without verbose
outputs or multiprocessing, and write results in
'subset' sub-directory:

>>> validate.check_conesearch_sites(
...     destdir='./subset', verbose=False, parallel=False, url_list=urls)

Add 'W24' from `astropy.io.votable.exceptions` to the list of
ignored warnings and re-run default validation. This is *not*
recommended unless you know exactly what you are doing:

>>> validate.NONCRIT_WARNINGS.set(validate.NONCRIT_WARNINGS() + ['W24'])
>>> validate.check_conesearch_sites()

Reset the list of ignored warnings back to default value.
Validate *all* Cone Search services in the STScI VAO registry
(this will take a while) and write results in 'all' sub-directory:

>>> validate.NONCRIT_WARNINGS.set(validate.NONCRIT_WARNINGS.defaultvalue)
>>> validate.check_conesearch_sites(destdir='./all', url_list=None)


Inspection of Validation Results
--------------------------------

`astropy.vo.validator.inspect` inspects results from
`astropy.vo.validator.validate`.

Examples
^^^^^^^^

Load Cone Search validation results directly from
`astropy.vo.client.vos_baseurl`:

>>> from astropy.vo.validator import inspect
>>> r = inspect.ConeSearchResults()

Print tally:

>>> r.tally()
good: 15 catalog(s)
warn: 15 catalog(s)
exception: 0 catalog(s)
error: 1 catalog(s)
total: 31 catalog(s)

Print a list of good Cone Search catalogs:

>>> r.list_cats('good')
2MASS All-Sky Catalog of Point Sources (Cutri+ 2003) 1
http://vizier.u-strasbg.fr/viz-bin/votable/-A?-source=II/246/out&
W22,W03
# ...

List Cone Search catalogs with warnings,
excluding warnings that were ignored in
`astropy.vo.validator.noncrit_warnings`,
and writes the output to a file:

>>> with open('warn_cats.txt', 'w') as fout:
...     r.list_cats('warn', fout=fout, ignore_noncrit=True)

Print the first good Cone Search catalog:

>>> catkey = r.catkeys['good'][0]
>>> r.print_cat(catkey)
{
    \"validate_network_error\": null,
    \"capabilityClass\": \"ConeSearch\",
    \"updated\": \"2011-09-14T20:17:37\",
    \"capabilityValidationLevel\": \"\",
    # ...
    \"validate_xmllint\": true
}
Found in good

Load Cone Search validation results from local
validation in the current directory:

>>> import os
>>> from astropy.vo.client.vos_catalog import BASEURL
>>> BASEURL.set(os.curdir + os.sep)
>>> r = inspect.ConeSearchResults()


See Also (optional)
===================

`NVO Directory <http://nvo.stsci.edu/vor10/index.aspx>`_

`Simple Cone Search Version 1.03 Recommendation
<http://www.ivoa.net/Documents/REC/DAL/ConeSearch-20080222.html>`_

`STScI VAO registry
<http://vao.stsci.edu/directory/NVORegInt.asmx?op=VOTCapabilityPredOpt>`_


Reference/API
=============

.. automodapi:: astropy.vo.client.vos_catalog
   :no-inheritance-diagram:
   :skip: VOSError

.. automodapi:: astropy.vo.client.conesearch
   :no-inheritance-diagram:
   :skip: ConeSearchError

.. automodapi:: astropy.vo.validator.validate
   :no-inheritance-diagram:

.. automodapi:: astropy.vo.validator.inspect
   :no-inheritance-diagram:
