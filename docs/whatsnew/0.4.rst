.. doctest-skip-all

.. _whatsnew-0.4:

==========================
What's New in Astropy 0.4?
==========================

Overview
--------

Astropy 0.4 is a major release that adds new functionality since the 0.3.x
series of releases. One new sub-package is included (see `SAMP`_), and many
new features have been implemented in the existing sub-pacakges, and
highlights are described below. In addition to usability improvements, we have
made a number of changes in the infrastructure for setting up/installing the
package, and for the configuration system (see `astropy-helpers`_ and
`Configuration`_).

Coordinates
-----------

The :ref:`astropy-coordinates` sub-package has been re-designed based on
feedback and experience with v0.2 and v0.3.  The design motivation is
described by
`APE5 <https://github.com/astropy/astropy-APEs/blob/master/APE5.rst>`_,
and details of the new usage is covered in detail in the
:ref:`astropy-coordinates` documentation section. Moving foreward, we
do not expect future backwards-incompatible changes to this subpackage.

For typical users, the major change is that the recommended way to use
coordinate functionality is via the `~astropy.coordinates.SkyCoord` class,
instead of the classes like `~astropy.coordinates.ICRS` classes (now called
"frame classes").

For most users of pre-v0.4 coordinates, this means that the best way to
adapt old code to the new framework is to change code like::

    >>> from astropy import units as u
    >>> from astropy.coordinates import ICRS  # or FK5, or Galactic, or similar
    >>> coordinate = ICRS(123.4*u.deg, 56.7*u.deg)

to instead be::

    >>> from astropy import units as u
    >>> from astropy.coordinates import SkyCoord
    >>> coordinate = SkyCoord(123.4*u.deg, 56.7*u.deg, frame='icrs')

Note that usage like::

    >>> coordinate = ICRS(123.4, 56.7, unit=('deg', 'deg'))  # NOT RECOMMENDED!

will continue to work in v0.4, but will yield a `~astropy.coordinates.SkyCoord`
instead of an `~astropy.coordinates.ICRS` object (the former behaves
more like the pre-v0.4 `~astropy.coordinates.ICRS`).  This compatibility
feature will be removed in the next major version, so you should update
your code to use `~astropy.coordinates.SkyCoord` directly by the next
release.

Users should also be aware that if they continue to use the first form (directly
creating `~astropy.coordinates.ICRS` frame objects), old code may still
work if it uses basic coordinate functionality, but many of the
convinience functions like catalog matching or attribute-based
transforms like ``icrscoord.galactic`` will no longer work.  This
features are now all in `~astropy.coordinates.SkyCoord`.

For advanced users or developers who have defined not-built-in coordinates,
take note that the extensive internal changes will require re-writing
user-defined coordinate frames.  The :ref:`sgr-example` document has
been updated for the new framework to provide a worked example of how
custom coordinates work .

More detailed information about the new framework and using it to define
custom coordinates is available at :ref:`astropy-coordinates-overview`,
:ref:`astropy-coordinates-definitions`, :ref:`astropy-coordinates-design`,
and :ref:`astropy-coordinates-create-repr`.


SAMP
----

The :ref:`vo-samp` sub-package is a new sub-package (adapted from the `SAMPy
package <http://packages.python.org/sampy/>`_) that contains an
implementation of the `Simple Application Messaging Protocol (SAMP)
<http://www.ivoa.net/documents/SAMP/>`_ standard that allows communication
with any SAMP-enabled application (such as `TOPCAT
<http://www.star.bris.ac.uk/~mbt/topcat/>`_, `SAO Ds9
<http://hea-www.harvard.edu/RD/ds9>`_, and `Aladin
<http://aladin.u-strasbg.fr>`_). This sub-package includes both classes for a
hub and a client, as well as an *integrated client* which automatically
starts up a hub and acts as a client::

    >>> from astropy.vo.samp import SAMPIntegratedClient
    >>> client = SAMPIntegratedClient()
    >>> client.connect()

We can then use the client to communicate with other clients::

    >>> client.get_registered_clients()
    ['hub', 'c1', 'c2']
    >>> client.get_metadata('c1')
    {'author.affiliation': 'Astrophysics Group, Bristol University',
     'author.email': 'm.b.taylor@bristol.ac.uk',
     'author.name': 'Mark Taylor',
     'home.page': 'http://www.starlink.ac.uk/topcat/',
     'samp.description.text': 'Tool for OPerations on Catalogues And Tables',
     'samp.documentation.url': 'http://127.0.0.1:2525/doc/sun253/index.html',
     'samp.icon.url': 'http://127.0.0.1:2525/doc/images/tc_sok.gif',
     'samp.name': 'topcat',
     'topcat.version': '4.0-1'}

and we can then send for example tables and images over SAMP to other
applications (see :ref:`vo-samp` for examples of how to do this).

Inspecting FITS headers from the command line
---------------------------------------------

The :ref:`astropy-io-fits` sub-package now provides a command line script for
inspecting the header(s) of a FITS file. With Astropy 0.4 installed, run
``fitsheader file.fits`` in your terminal to print the header information to
the screen in a human-readable format. Run ``fitsheader --help`` to see the
full usage documentation.

Documentation/Sphinx extension changes
--------------------------------------

Starting in v0.4, astropy documentation will now show the full name of functions
and classes prefixed by the intended user-facing location.  This is in contrast
to previous versions, which pointed to the actual implementation module, rather
than the intended public API location.

This will affect URLs pointing to specific documentation pages.  For example,
this URL points to the v0.3 location of the
`astropy.cosmology.luminosity_distance` function:
http://docs.astropy.org/en/v0.3/api/astropy.cosmology.funcs.luminosity_distance.html
while the appropriate URL for v0.4 and later is:
http://docs.astropy.org/en/v0.4/api/astropy.cosmology.luminosity_distance.html

astropy-helpers
---------------

We have now extracted our set-up and documentation utilities into a separate
package, `astropy-helpers <https://github.com/astropy/astropy-helpers>`_. In
practice, this does not change anything from a user point of view, but it is
a big internal change that will allow any other packages to benefit from the
set-up utilies developed for the core package without having to first install
astropy.

Configuration
-------------

The configuration framework has been re-factored. If you have previously
edited the astropy configuration file (typically located in
``~/.astropy/config/astropy.cfg``) then you should read over
:ref:`config-0-4-transition` in order to understand how to update it
to the new mechanism.

Deprecation and backward-incompatible changes
---------------------------------------------

- ``Quantity`` comparisons with ``==`` or ``!=`` now always return ``True``
  or ``False``, even if units do not match (for which case a ``UnitsError``
  used to be raised).  [#2328]

- The functional interface for `astropy.cosmology` (e.g.
  ``cosmology.H(0.5)`` is now deprecated in favor of the objected-oriented
  approach (``WMAP9.H(0.5)``). [#2343]

- The `astropy.coordinates` sub-package has undergone major changes for
  implementing the
  `APE5 <https://github.com/astropy/astropy-APEs/blob/master/APE5.rst>`_ plan
  for the package.  A compatibility layer has been added that will allow
  common use cases of pre-v0.4 coordinates to work, but this layer will be
  removed in the next major version.  Hence, any use of the coordinates
  package should be adapted to the new framework.  Additionally, the
  compatibility layer cannot be used for convinience functions (like the
  ``match_catalog_*()`` functions), as these have been moved to
  `~astropy.coordinates.SkyCoord`. From this point on, major changes to the
  coordinates classes are not expected.  [#2422]

Note on future versions
-----------------------

While the current release supports Python 2.6, 2.7, and 3.1 to 3.4, the next
release (1.0) will drop support for Python 3.1 and 3.2.

